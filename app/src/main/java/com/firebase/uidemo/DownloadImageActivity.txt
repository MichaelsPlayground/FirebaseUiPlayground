package com.firebase.uidemo;

import android.Manifest;
import android.app.DownloadManager;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import androidx.activity.result.ActivityResultLauncher;
import androidx.annotation.NonNull;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;

import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;

import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Objects;

import pub.devrel.easypermissions.AppSettingsDialog;
import pub.devrel.easypermissions.EasyPermissions;

//import de.androidcrypto.firebaseplayground.models.MessageModel;

public class DownloadImageActivity extends AppCompatActivity implements EasyPermissions.PermissionCallbacks{

    com.google.android.material.textfield.TextInputEditText signedInUser, selectedImage;
    com.google.android.material.textfield.TextInputEditText edtMessage, edtRoomId, userPhotoUrl, userPublicKey, userName;
    com.google.android.material.textfield.TextInputLayout edtMessageLayout;
    TextView warningNoData;

    static final String TAG = "SelectImage";
    // get the data from auth
    private static String authUserId = "", authUserEmail, authDisplayName, authPhotoUrl;
    private static String selectedImageFileReference = "";

    private DatabaseReference mDatabaseReference;
    private FirebaseAuth mAuth;
    ProgressBar progressBar;

    private static final int RC_CHOOSE_PHOTO = 101;
    private static final int RC_IMAGE_PERMS = 102;
    private static final String PERMS = Manifest.permission.READ_EXTERNAL_STORAGE;
/*
    private DownloadManager downloadManager = null;
    private long lastDownload = -1L;
    private Uri mDownloadUrl = null;
    private String mFileUriString = null;
    private String mFileName = null;
    private ActivityResultLauncher<String[]> intentLauncher;
*/
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_download_image);

        signedInUser = findViewById(R.id.etDownloadImageSignedInUser);
        selectedImage = findViewById(R.id.etDownloadImageSelectedImage);
        progressBar = findViewById(R.id.pbDownloadImage);

        edtMessageLayout = findViewById(R.id.etDownloadImageMessageLayout);
        edtMessage = findViewById(R.id.etDownloadImageMessage);
        edtRoomId = findViewById(R.id.etDownloadImageRoomId);

        //downloadManager = (DownloadManager) this.getSystemService(Context.DOWNLOAD_SERVICE);

/*
        warningNoData = findViewById(R.id.tvDatabaseUserNoData);
        userId = findViewById(R.id.etDatabaseUserUserId);
        userEmail = findViewById(R.id.etDatabaseUserUserEmail);
        userPhotoUrl = findViewById(R.id.etDatabaseUserPhotoUrl);
        userPublicKey = findViewById(R.id.etDatabaseUserPublicKey);
        userName = findViewById(R.id.etDatabaseUserUserName);
*/
        // don't show the keyboard on startUp
        //getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);

        // Initialize Firebase Auth
        mAuth = FirebaseAuth.getInstance();
        // Initialize Firebase Database
        // https://fir-playground-1856e-default-rtdb.europe-west1.firebasedatabase.app/
        // if the database location is not us we need to use the reference:
        mDatabaseReference = FirebaseDatabase.getInstance("https://fir-playground-1856e-default-rtdb.europe-west1.firebasedatabase.app/").getReference();
        // the following can be used if the database server location is us
        //mDatabaseReference = FirebaseDatabase.getInstance().getReference();
/*
        Intent intent = getIntent();
        selectedImageFileReference = intent.getStringExtra("FILEREFERENCE");
        mFileName = intent.getStringExtra("FILENAME");
        mFileUriString = intent.getStringExtra("FILEURI");
        if (selectedImageFileReference != null) {
            Log.i(TAG, "selectedImageFileReference: " + selectedImageFileReference);
            selectedImage.setText(selectedImageFileReference + "\nURI :" + intent.getStringExtra("FILEURI"));
            //beginDownload();
            downloadUsingDownloadmanager(mFileUriString, "example.jpg");
        }
*/
        Button selectImage = findViewById(R.id.btnDownloadImageSelectImage);
        Button backToMain = findViewById(R.id.btnDownloadImageToMain);
        /*
        selectImage.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent intent = new Intent(DownloadImageActivity.this, ListImagesActivity.class);
                startActivity(intent);
                finish();
            }
        });
*/
        Button downloadImage = findViewById(R.id.btnDownloadImageDownloadImage);
        downloadImage.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Log.i(TAG, "download image FileReference: " + selectedImageFileReference);
            }
        });

        backToMain.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent intent = new Intent(DownloadImageActivity.this, MainActivity.class);
                startActivity(intent);
                finish();
            }
        });

/*
static data:
authUser:
Email: michael.telefon08@gmail.com
UID: VgNGhMth85Y0Szg6FxLMcWkEpmA3
Display Name: Michael Fehr

receiveUser:
Email: klaus.zwang.1934@gmail.com
UID: 0QCS5u2UnxYURlbntvVTA6ZTbaO2
Display Name: klaus.zwang.1934@gmail.com
 */
/*
        edtMessageLayout.setEndIconOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                showProgressBar("send");
                // get the roomId by comparing 2 UID strings
                String roomId = getRoomId(authUserId, receiveUserId);
                String messageString = edtMessage.getText().toString();
                edtRoomId.setText(roomId);
                Log.i(TAG, "message: " + messageString);
                Log.i(TAG, "roomId: " + roomId);
                // now we are going to send data to the database
                long actualTime = new Date().getTime();
                MessageModel messageModel = new MessageModel(authUserId, messageString, actualTime, false);
                mDatabaseReference.child("messages").child(roomId).push().setValue(messageModel);
                // without push there is no new chatId key
                // mDatabaseReference.child("messages").child(roomId).setValue(messageModel);
                Toast.makeText(getApplicationContext(),
                        "message written to database",
                        Toast.LENGTH_SHORT).show();
                edtMessage.setText("");
            }
        });
        */
/*
        Button send = findViewById(R.id.btnDownloadImageSend);
        send.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                // todo get the real uids, remove the line
                receiveUserId = "0QCS5u2UnxYURlbntvVTA6ZTbaO2";
                // get the roomId by comparing 2 UID strings
                String roomId = getRoomId(authUserId, receiveUserId);
                String messageString = edtMessage.getText().toString();
                edtRoomId.setText(roomId);
                Log.i(TAG, "message: " + messageString);
                Log.i(TAG, "roomId: " + roomId);
                // now we are going to send data to the database
                long actualTime = new Date().getTime();
                MessageModel messageModel = new MessageModel(authUserId, messageString, actualTime, false);
                mDatabaseReference.child("messages").child(roomId).push().setValue(messageModel);
                // without push there is no new chatId key
                // mDatabaseReference.child("messages").child(roomId).setValue(messageModel);
                Toast.makeText(getApplicationContext(),
                        "message written to database",
                        Toast.LENGTH_SHORT).show();
            }
        });*/
    }


    @Override
    public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == RC_CHOOSE_PHOTO) {
            if (resultCode == RESULT_OK) {
                Uri selectedImage = data.getData();
                uploadPhoto(selectedImage);
            } else {
                Toast.makeText(this, "No image chosen", Toast.LENGTH_SHORT).show();
            }
        } else if (requestCode == AppSettingsDialog.DEFAULT_SETTINGS_REQ_CODE
                && EasyPermissions.hasPermissions(this, PERMS)) {
            choosePhoto();
        }
    }

    @AfterPermissionGranted(RC_IMAGE_PERMS)
    protected void choosePhoto() {
        if (!EasyPermissions.hasPermissions(this, PERMS)) {
            EasyPermissions.requestPermissions(this, getString(R.string.rational_image_perm),
                    RC_IMAGE_PERMS, PERMS);
            return;
        }

        Intent i = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
        startActivityForResult(i, RC_CHOOSE_PHOTO);
    }

    private void uploadPhoto(Uri uri) {
        // Reset UI
        hideDownloadUI();
        Toast.makeText(this, "Uploading...", Toast.LENGTH_SHORT).show();

        // Upload to Cloud Storage
        String uuid = UUID.randomUUID().toString();
        mImageRef = FirebaseStorage.getInstance().getReference(uuid);
        mImageRef.putFile(uri)
                .addOnSuccessListener(this, taskSnapshot -> {
                    if (BuildConfig.DEBUG) {
                        Log.d(TAG, "uploadPhoto:onSuccess:" +
                                taskSnapshot.getMetadata().getReference().getPath());
                    }
                    Toast.makeText(ImageActivity.this, "Image uploaded",
                            Toast.LENGTH_SHORT).show();

                    showDownloadUI();
                })
                .addOnFailureListener(this, e -> {
                    Log.w(TAG, "uploadPhoto:onError", e);
                    Toast.makeText(ImageActivity.this, "Upload failed",
                            Toast.LENGTH_SHORT).show();
                });
    }

    private void hideDownloadUI() {
        mBinding.buttonDownloadDirect.setEnabled(false);

        mBinding.firstImage.setImageResource(0);
        mBinding.firstImage.setVisibility(View.INVISIBLE);
    }

    private void showDownloadUI() {
        mBinding.buttonDownloadDirect.setEnabled(true);

        mBinding.firstImage.setVisibility(View.VISIBLE);
    }

    @Override
    public void onRequestPermissionsResult(int requestCode,
                                           @NonNull String[] permissions,
                                           @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        EasyPermissions.onRequestPermissionsResult(requestCode, permissions, grantResults, this);
    }


/*
    private void downloadUsingDownloadmanager(String downloadUrl, String downloadFilename) {
        Log.i(TAG, "startDownload");
        Uri uri = Uri.parse(downloadUrl);

        Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS)
                .mkdirs();

        DownloadManager.Request req = new DownloadManager.Request(uri);

        req.setAllowedNetworkTypes(DownloadManager.Request.NETWORK_WIFI
                        | DownloadManager.Request.NETWORK_MOBILE)
                .setAllowedOverRoaming(false)
                .setTitle(downloadFilename)
                .setDescription("Download is running...")
                .setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS,
                        downloadFilename);
        lastDownload = downloadManager.enqueue(req);
    }

    private void beginDownload() {
        Log.i(TAG, "begin download for URI: " + mFileName);
        // Get path
        //String path = "photos/" + mFileUri.getLastPathSegment();
        String path = "photos/" + mFileName;

        // Kick off MyDownloadService to download the file
        Intent intent = new Intent(this, MyDownloadService.class)
                .putExtra(MyDownloadService.EXTRA_DOWNLOAD_PATH, path)
                .setAction(MyDownloadService.ACTION_DOWNLOAD);
        startService(intent);

        // Show loading spinner
        showProgressBar(getString(R.string.progress_downloading));
    }
*/
    @Override
    public void onStart() {
        super.onStart();
        updateUI(mAuth.getCurrentUser());
    }

    @Override
    public void onStop() {
        super.onStop();
    }

    @Override
    public void onSaveInstanceState(Bundle out) {
        super.onSaveInstanceState(out);
    }

    private void showMessageDialog(String title, String message) {
        AlertDialog ad = new AlertDialog.Builder(this)
                .setTitle(title)
                .setMessage(message)
                .create();
        ad.show();
    }


    /**
     * service methods
     */

    // compare two strings and build a new string: if a < b: ab if a > b: ba, if a = b: ab
    private String getRoomId(String a, String b) {
        int compare = a.compareTo(b);
        if (compare > 0) return b + a;
        else return a + b;
    }

    /**
     * basic
     */

    private void reload() {
        Objects.requireNonNull(mAuth.getCurrentUser()).reload().addOnCompleteListener(new OnCompleteListener<Void>() {
            @Override
            public void onComplete(@NonNull Task<Void> task) {
                if (task.isSuccessful()) {
                    updateUI(mAuth.getCurrentUser());
                    /*
                    Toast.makeText(getApplicationContext(),
                            "Reload successful!",
                            Toast.LENGTH_SHORT).show();
                     */
                } else {
                    Log.e(TAG, "reload", task.getException());
                    Toast.makeText(getApplicationContext(),
                            "Failed to reload user.",
                            Toast.LENGTH_SHORT).show();
                }
            }
        });
    }

    private void updateUI(FirebaseUser user) {
        hideProgressBar();
        if (user != null) {
            authUserId = user.getUid();
            authUserEmail = user.getEmail();
            if (user.getDisplayName() != null) {
                authDisplayName = Objects.requireNonNull(user.getDisplayName()).toString();
            } else {
                authDisplayName = "no display name available";
            }
            String userData = String.format("Email: %s", authUserEmail);
            userData += "\nUID: " + authUserId;
            userData += "\nDisplay Name: " + authDisplayName;
            signedInUser.setText(userData);
            Log.i(TAG, "authUser: " + userData);
        } else {
            signedInUser.setText(null);
        }
    }

    private void showProgressBar(String caption) {
        //binding.caption.setText(caption);
        progressBar.setVisibility(View.VISIBLE);
    }

    private void hideProgressBar() {
        //binding.caption.setText("");
        progressBar.setVisibility(View.INVISIBLE);
    }

    @Override
    public void onPermissionsGranted(int requestCode, @NonNull List<String> perms) {
        // See #choosePhoto with @AfterPermissionGranted
    }

    @Override
    public void onPermissionsDenied(int requestCode, @NonNull List<String> perms) {
        if (EasyPermissions.somePermissionPermanentlyDenied(this,
                Collections.singletonList(PERMS))) {
            new AppSettingsDialog.Builder(this).build().show();
        }
    }
}